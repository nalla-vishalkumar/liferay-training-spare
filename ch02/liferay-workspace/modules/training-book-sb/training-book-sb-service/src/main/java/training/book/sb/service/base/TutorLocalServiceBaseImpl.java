/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package training.book.sb.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import training.book.sb.model.Tutor;
import training.book.sb.service.TutorLocalService;
import training.book.sb.service.persistence.TrainingPersistence;
import training.book.sb.service.persistence.TutorPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the tutor local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link training.book.sb.service.impl.TutorLocalServiceImpl}.
 * </p>
 *
 * @author Vishal Kumar Nalla
 * @see training.book.sb.service.impl.TutorLocalServiceImpl
 * @see training.book.sb.service.TutorLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class TutorLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements TutorLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link training.book.sb.service.TutorLocalServiceUtil} to access the tutor local service.
	 */

	/**
	 * Adds the tutor to the database. Also notifies the appropriate model listeners.
	 *
	 * @param tutor the tutor
	 * @return the tutor that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Tutor addTutor(Tutor tutor) {
		tutor.setNew(true);

		return tutorPersistence.update(tutor);
	}

	/**
	 * Creates a new tutor with the primary key. Does not add the tutor to the database.
	 *
	 * @param tutorId the primary key for the new tutor
	 * @return the new tutor
	 */
	@Override
	public Tutor createTutor(long tutorId) {
		return tutorPersistence.create(tutorId);
	}

	/**
	 * Deletes the tutor with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param tutorId the primary key of the tutor
	 * @return the tutor that was removed
	 * @throws PortalException if a tutor with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Tutor deleteTutor(long tutorId) throws PortalException {
		return tutorPersistence.remove(tutorId);
	}

	/**
	 * Deletes the tutor from the database. Also notifies the appropriate model listeners.
	 *
	 * @param tutor the tutor
	 * @return the tutor that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Tutor deleteTutor(Tutor tutor) {
		return tutorPersistence.remove(tutor);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Tutor.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return tutorPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link training.book.sb.model.impl.TutorModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return tutorPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link training.book.sb.model.impl.TutorModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return tutorPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return tutorPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return tutorPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Tutor fetchTutor(long tutorId) {
		return tutorPersistence.fetchByPrimaryKey(tutorId);
	}

	/**
	 * Returns the tutor matching the UUID and group.
	 *
	 * @param uuid the tutor's UUID
	 * @param groupId the primary key of the group
	 * @return the matching tutor, or <code>null</code> if a matching tutor could not be found
	 */
	@Override
	public Tutor fetchTutorByUuidAndGroupId(String uuid, long groupId) {
		return tutorPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the tutor with the primary key.
	 *
	 * @param tutorId the primary key of the tutor
	 * @return the tutor
	 * @throws PortalException if a tutor with the primary key could not be found
	 */
	@Override
	public Tutor getTutor(long tutorId) throws PortalException {
		return tutorPersistence.findByPrimaryKey(tutorId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(tutorLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Tutor.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("tutorId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(tutorLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Tutor.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("tutorId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(tutorLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Tutor.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("tutorId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<Tutor>() {
				@Override
				public void performAction(Tutor tutor)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						tutor);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(Tutor.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return tutorLocalService.deleteTutor((Tutor)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return tutorPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the tutors matching the UUID and company.
	 *
	 * @param uuid the UUID of the tutors
	 * @param companyId the primary key of the company
	 * @return the matching tutors, or an empty list if no matches were found
	 */
	@Override
	public List<Tutor> getTutorsByUuidAndCompanyId(String uuid, long companyId) {
		return tutorPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of tutors matching the UUID and company.
	 *
	 * @param uuid the UUID of the tutors
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of tutors
	 * @param end the upper bound of the range of tutors (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching tutors, or an empty list if no matches were found
	 */
	@Override
	public List<Tutor> getTutorsByUuidAndCompanyId(String uuid, long companyId,
		int start, int end, OrderByComparator<Tutor> orderByComparator) {
		return tutorPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the tutor matching the UUID and group.
	 *
	 * @param uuid the tutor's UUID
	 * @param groupId the primary key of the group
	 * @return the matching tutor
	 * @throws PortalException if a matching tutor could not be found
	 */
	@Override
	public Tutor getTutorByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return tutorPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the tutors.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link training.book.sb.model.impl.TutorModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of tutors
	 * @param end the upper bound of the range of tutors (not inclusive)
	 * @return the range of tutors
	 */
	@Override
	public List<Tutor> getTutors(int start, int end) {
		return tutorPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of tutors.
	 *
	 * @return the number of tutors
	 */
	@Override
	public int getTutorsCount() {
		return tutorPersistence.countAll();
	}

	/**
	 * Updates the tutor in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param tutor the tutor
	 * @return the tutor that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Tutor updateTutor(Tutor tutor) {
		return tutorPersistence.update(tutor);
	}

	/**
	 * Returns the training local service.
	 *
	 * @return the training local service
	 */
	public training.book.sb.service.TrainingLocalService getTrainingLocalService() {
		return trainingLocalService;
	}

	/**
	 * Sets the training local service.
	 *
	 * @param trainingLocalService the training local service
	 */
	public void setTrainingLocalService(
		training.book.sb.service.TrainingLocalService trainingLocalService) {
		this.trainingLocalService = trainingLocalService;
	}

	/**
	 * Returns the training persistence.
	 *
	 * @return the training persistence
	 */
	public TrainingPersistence getTrainingPersistence() {
		return trainingPersistence;
	}

	/**
	 * Sets the training persistence.
	 *
	 * @param trainingPersistence the training persistence
	 */
	public void setTrainingPersistence(TrainingPersistence trainingPersistence) {
		this.trainingPersistence = trainingPersistence;
	}

	/**
	 * Returns the tutor local service.
	 *
	 * @return the tutor local service
	 */
	public TutorLocalService getTutorLocalService() {
		return tutorLocalService;
	}

	/**
	 * Sets the tutor local service.
	 *
	 * @param tutorLocalService the tutor local service
	 */
	public void setTutorLocalService(TutorLocalService tutorLocalService) {
		this.tutorLocalService = tutorLocalService;
	}

	/**
	 * Returns the tutor persistence.
	 *
	 * @return the tutor persistence
	 */
	public TutorPersistence getTutorPersistence() {
		return tutorPersistence;
	}

	/**
	 * Sets the tutor persistence.
	 *
	 * @param tutorPersistence the tutor persistence
	 */
	public void setTutorPersistence(TutorPersistence tutorPersistence) {
		this.tutorPersistence = tutorPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("training.book.sb.model.Tutor",
			tutorLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"training.book.sb.model.Tutor");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return TutorLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Tutor.class;
	}

	protected String getModelClassName() {
		return Tutor.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = tutorPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = training.book.sb.service.TrainingLocalService.class)
	protected training.book.sb.service.TrainingLocalService trainingLocalService;
	@BeanReference(type = TrainingPersistence.class)
	protected TrainingPersistence trainingPersistence;
	@BeanReference(type = TutorLocalService.class)
	protected TutorLocalService tutorLocalService;
	@BeanReference(type = TutorPersistence.class)
	protected TutorPersistence tutorPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}