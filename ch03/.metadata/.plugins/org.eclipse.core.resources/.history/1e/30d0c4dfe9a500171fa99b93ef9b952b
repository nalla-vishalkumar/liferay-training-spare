/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package training.book.sb.service.impl;

import java.util.Date;
import java.util.List;

import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.Validator;

import training.book.sb.exception.TutorEmailException;
import training.book.sb.exception.TutorNameException;
import training.book.sb.model.Tutor;
import training.book.sb.service.base.TutorLocalServiceBaseImpl;

/**
 * The implementation of the tutor local service.
 *
 * <p>
 * All custom service methods should be put in this class. Whenever methods are
 * added, rerun ServiceBuilder to copy their definitions into the
 * {@link training.book.sb.service.TutorLocalService} interface.
 *
 * <p>
 * This is a local service. Methods of this service will not have security
 * checks based on the propagated JAAS credentials because this service can only
 * be accessed from within the same VM.
 * </p>
 *
 * @author Vishal Kumar Nalla
 * @see TutorLocalServiceBaseImpl
 * @see training.book.sb.service.TutorLocalServiceUtil
 */
public class TutorLocalServiceImpl extends TutorLocalServiceBaseImpl {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never reference this class directly. Always use {@link
     * training.book.sb.service.TutorLocalServiceUtil} to access the tutor local
     * service.
     */

    public List<Tutor> getTutors(long groupId, long trainingId)
            throws SystemException {
        return tutorPersistence.findByG_G(groupId, trainingId);
    }

    public List<Tutor> getTutors(long groupId, long trainingId, int start,
            int end) throws SystemException {

        return tutorPersistence.findByG_G(groupId, trainingId, start, end);
    }

    protected void validate(String tutorName, String tutorEmail)
            throws PortalException {
        if (Validator.isNull(tutorName)) {
            throw new TutorNameException();
        }

        if (!Validator.isEmailAddress(tutorEmail)) {
            throw new TutorEmailException();
        }
    }

    public Tutor addTutor(long userId, long trainingId, String tutorName,
            String tutorEmail, ServiceContext serviceContext)
            throws PortalException {

        long groupId = serviceContext.getScopeGroupId();

        User user = userLocalService.getUserById(userId);

        Date now = new Date();

        validate(tutorName, tutorEmail);

        long tutorId = counterLocalService.increment();

        Tutor tutor = tutorPersistence.create(tutorId);

        tutor.setUuid(serviceContext.getUuid());
        tutor.setUserId(userId);
        tutor.setGroupId(groupId);
        tutor.setCompanyId(user.getCompanyId());
        tutor.setUserName(user.getFullName());
        tutor.setCreateDate(serviceContext.getCreateDate(now));
        tutor.setModifiedDate(serviceContext.getModifiedDate(now));
        tutor.setExpandoBridgeAttributes(serviceContext);
        tutor.setTrainingId(trainingId);
        tutor.setTutorName(tutorName);
        tutor.setTutorEmail(tutorEmail);

        tutorPersistence.update(tutor);

        return tutor;

    }
    
    
}