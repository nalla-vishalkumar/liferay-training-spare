/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package training.book.sb.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import training.book.sb.model.Training;
import training.book.sb.model.TrainingModel;
import training.book.sb.model.TrainingSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Training service. Represents a row in the &quot;TB_Training&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TrainingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TrainingImpl}.
 * </p>
 *
 * @author Vishal Kumar Nalla
 * @see TrainingImpl
 * @see Training
 * @see TrainingModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TrainingModelImpl extends BaseModelImpl<Training>
	implements TrainingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a training model instance should use the {@link Training} interface instead.
	 */
	public static final String TABLE_NAME = "TB_Training";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "trainingId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "trainingName", Types.VARCHAR },
			{ "trainingDescription", Types.VARCHAR },
			{ "tutorId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("trainingName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trainingDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tutorId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table TB_Training (uuid_ VARCHAR(75) null,trainingId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,trainingName VARCHAR(75) null,trainingDescription VARCHAR(75) null,tutorId LONG)";
	public static final String TABLE_SQL_DROP = "drop table TB_Training";
	public static final String ORDER_BY_JPQL = " ORDER BY training.trainingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TB_Training.trainingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(training.book.sb.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.training.book.sb.model.Training"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(training.book.sb.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.training.book.sb.model.Training"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(training.book.sb.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.training.book.sb.model.Training"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long TRAININGID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Training toModel(TrainingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Training model = new TrainingImpl();

		model.setUuid(soapModel.getUuid());
		model.setTrainingId(soapModel.getTrainingId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTrainingName(soapModel.getTrainingName());
		model.setTrainingDescription(soapModel.getTrainingDescription());
		model.setTutorId(soapModel.getTutorId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Training> toModels(TrainingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Training> models = new ArrayList<Training>(soapModels.length);

		for (TrainingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(training.book.sb.service.util.ServiceProps.get(
				"lock.expiration.time.training.book.sb.model.Training"));

	public TrainingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _trainingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTrainingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _trainingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Training.class;
	}

	@Override
	public String getModelClassName() {
		return Training.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("trainingId", getTrainingId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("trainingName", getTrainingName());
		attributes.put("trainingDescription", getTrainingDescription());
		attributes.put("tutorId", getTutorId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long trainingId = (Long)attributes.get("trainingId");

		if (trainingId != null) {
			setTrainingId(trainingId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String trainingName = (String)attributes.get("trainingName");

		if (trainingName != null) {
			setTrainingName(trainingName);
		}

		String trainingDescription = (String)attributes.get(
				"trainingDescription");

		if (trainingDescription != null) {
			setTrainingDescription(trainingDescription);
		}

		Long tutorId = (Long)attributes.get("tutorId");

		if (tutorId != null) {
			setTutorId(tutorId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getTrainingId() {
		return _trainingId;
	}

	@Override
	public void setTrainingId(long trainingId) {
		_trainingId = trainingId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTrainingName() {
		if (_trainingName == null) {
			return StringPool.BLANK;
		}
		else {
			return _trainingName;
		}
	}

	@Override
	public void setTrainingName(String trainingName) {
		_trainingName = trainingName;
	}

	@JSON
	@Override
	public String getTrainingDescription() {
		if (_trainingDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _trainingDescription;
		}
	}

	@Override
	public void setTrainingDescription(String trainingDescription) {
		_trainingDescription = trainingDescription;
	}

	@JSON
	@Override
	public long getTutorId() {
		return _tutorId;
	}

	@Override
	public void setTutorId(long tutorId) {
		_tutorId = tutorId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Training.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Training.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Training toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Training)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TrainingImpl trainingImpl = new TrainingImpl();

		trainingImpl.setUuid(getUuid());
		trainingImpl.setTrainingId(getTrainingId());
		trainingImpl.setGroupId(getGroupId());
		trainingImpl.setCompanyId(getCompanyId());
		trainingImpl.setUserId(getUserId());
		trainingImpl.setUserName(getUserName());
		trainingImpl.setCreateDate(getCreateDate());
		trainingImpl.setModifiedDate(getModifiedDate());
		trainingImpl.setTrainingName(getTrainingName());
		trainingImpl.setTrainingDescription(getTrainingDescription());
		trainingImpl.setTutorId(getTutorId());

		trainingImpl.resetOriginalValues();

		return trainingImpl;
	}

	@Override
	public int compareTo(Training training) {
		long primaryKey = training.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Training)) {
			return false;
		}

		Training training = (Training)obj;

		long primaryKey = training.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TrainingModelImpl trainingModelImpl = this;

		trainingModelImpl._originalUuid = trainingModelImpl._uuid;

		trainingModelImpl._originalGroupId = trainingModelImpl._groupId;

		trainingModelImpl._setOriginalGroupId = false;

		trainingModelImpl._originalCompanyId = trainingModelImpl._companyId;

		trainingModelImpl._setOriginalCompanyId = false;

		trainingModelImpl._setModifiedDate = false;

		trainingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Training> toCacheModel() {
		TrainingCacheModel trainingCacheModel = new TrainingCacheModel();

		trainingCacheModel.uuid = getUuid();

		String uuid = trainingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			trainingCacheModel.uuid = null;
		}

		trainingCacheModel.trainingId = getTrainingId();

		trainingCacheModel.groupId = getGroupId();

		trainingCacheModel.companyId = getCompanyId();

		trainingCacheModel.userId = getUserId();

		trainingCacheModel.userName = getUserName();

		String userName = trainingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			trainingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			trainingCacheModel.createDate = createDate.getTime();
		}
		else {
			trainingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			trainingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			trainingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		trainingCacheModel.trainingName = getTrainingName();

		String trainingName = trainingCacheModel.trainingName;

		if ((trainingName != null) && (trainingName.length() == 0)) {
			trainingCacheModel.trainingName = null;
		}

		trainingCacheModel.trainingDescription = getTrainingDescription();

		String trainingDescription = trainingCacheModel.trainingDescription;

		if ((trainingDescription != null) &&
				(trainingDescription.length() == 0)) {
			trainingCacheModel.trainingDescription = null;
		}

		trainingCacheModel.tutorId = getTutorId();

		return trainingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", trainingId=");
		sb.append(getTrainingId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", trainingName=");
		sb.append(getTrainingName());
		sb.append(", trainingDescription=");
		sb.append(getTrainingDescription());
		sb.append(", tutorId=");
		sb.append(getTutorId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("training.book.sb.model.Training");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trainingId</column-name><column-value><![CDATA[");
		sb.append(getTrainingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trainingName</column-name><column-value><![CDATA[");
		sb.append(getTrainingName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trainingDescription</column-name><column-value><![CDATA[");
		sb.append(getTrainingDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tutorId</column-name><column-value><![CDATA[");
		sb.append(getTutorId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Training.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Training.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _trainingId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _trainingName;
	private String _trainingDescription;
	private long _tutorId;
	private long _columnBitmask;
	private Training _escapedModel;
}